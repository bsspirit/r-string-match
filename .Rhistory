dat$Species<-ifelse(dat$Species=="virginica",1,0)
log_model<-glm(Species~.,family=binomial(link='logit'),data=dat)
summary(log_model)
# 逐步回归
log_model2<-step(log_model)
summary(log_model2)
# 混淆矩阵
pred<-predict(log_model2)
prob<-exp(pred)/(1+exp(pred))
yhat<-1*(prob>0.5)
table(dat$Species,yhat)
# 决策树
library(rpart)
library(rpart.plot)
library(visNetwork)
library(sparkline)
library(ggpol)
dtree_model <- rpart(Species~., data = iris, control = rpart.control(cp = 0.019))
visTree(dtree_model)
rpart.plot(dtree_model)
# 预测
dtree_pred <- predict(dtree_model,iris,type = "class")
## 混淆矩阵
ggplot() + geom_confmat(aes(x = iris$Species, y = dtree_pred),
normalize = TRUE, text.perc = TRUE)+
labs(x = "Reference",y = "Prediction")+
scale_fill_gradient2(low="darkblue", high="lightgreen")
library(partykit)
ct <- ctree(Species ~ ., data = iris, maxdepth = 4, alpha = 0.5)
plot(ct)
rpart.plot(dtree_model)
## 混淆矩阵
ggplot() + geom_confmat(aes(x = iris$Species, y = dtree_pred),
normalize = TRUE, text.perc = TRUE)+
labs(x = "Reference",y = "Prediction")+
scale_fill_gradient2(low="darkblue", high="lightgreen")
library(partykit)
ct <- ctree(Species ~ ., data = iris, maxdepth = 4, alpha = 0.5)
plot(ct)
library("xgboost")
library("Matrix")
y <- as.numeric(iris$Species) - 1
x <- as.matrix(iris[,-5])
xgb_model<-xgboost(data=x,label=y,max_depth=4,eta=0.5,
nthread=2,nrounds=10,subsample=0.7,objective="multi:softprob",
num_class=3)
# 变量重要性
xgb_imp<-xgb.importance(model=xgb_model)
xgb.plot.importance(xgb_imp,rel_to_first = TRUE)
# 预测
xgb_pred<-matrix(predict(xgb_model,x),ncol=3,byrow = TRUE)
xgb_pred<-data.frame(xgb_pred)
xgb_pred$result<-apply(xgb_pred,1,which.max)
xgb_pred$label<-levels(iris$Species)[xgb_pred$result]
# 评估
ggplot() + geom_confmat(aes(x = iris$Species, y = xgb_pred$label),
normalize = TRUE, text.perc = TRUE)+
labs(x = "Reference",y = "Prediction")+
scale_fill_gradient2(low="darkblue", high="lightgreen")
#=========================================================
library(ggplot2)
#===========================================================
library(neuralnet);
library(NeuralNetTools);
nn <- neuralnet(Species=="setosa"~ Sepal.Length + Sepal.Width +
Petal.Length + Petal.Width,
data = iris,hidden = 0)
# 查看网络结构
plot(nn)
nn$result.matrix #结果矩阵
nn$err.fct  #损失函数
nn$act.fct  #激活函數
# 多分类，单层网络
n2a <- neuralnet(Species~ Sepal.Length + Sepal.Width +
Petal.Length + Petal.Width,
data = iris,hidden=1)
plot(n2a)
n2a$result.matrix #误差非常大
# 多分类，单层网络，2个节点
n2b <- neuralnet(Species~ Sepal.Length + Sepal.Width +
Petal.Length + Petal.Width,
data = iris,hidden=c(2))
plot(n2b)
# 两层神经网络（多层感知器）
n3a <- neuralnet(Species~ Sepal.Length + Sepal.Width +
Petal.Length + Petal.Width,
data = iris,hidden=c(1,1))
plot(n3a)
n3a$result.matrix
# 多层神经网络（深度学习）: 3个隐藏层，每层2个节点
n3d <- neuralnet(Species~ Sepal.Length + Sepal.Width + Petal.Length +
Petal.Width, data = iris,hidden=c(2,2,2))
plot(n3d)
# 结果矩阵
n3d$result.matrix
plot(n3d)
plot(n3a)
library(GGally)
library(GGally)
res <- kmeans(iris[,1:4], centers=3)
ggpairs(iris,columns = 1:5,
mapping=aes(colour=as.character(res$cluster)))
library(flexclust) #段剖面图
clk2 <- cclust(iris[,-5], k=3);clk2
barchart(clk2,legend=TRUE)
library(dbscan)
nn <- kNN(iris[,-5], k=5)
nn
# 打印与33号最近的5个点
idx<-33
cols = ifelse(1:nrow(iris[,-5]) %in% nn$id[idx,],"red", "black")
cols[idx]<-'blue'
plot(iris[,-5],pch = 19, col = cols)
plot(nn, iris[,-5])
res <- dbscan(iris[,-5], eps = 0.5, minPts = 5)
res
pairs(iris, col = res$cluster + 1L)
data("moons")
head(moons)
cl <- hdbscan(moons, minPts = 5)
cl
plot(moons, col=cl$cluster+1, pch=20)
#=========================================================
library(ggplot2)
# 线性回归
dat<-na.omit(airquality)
lm_model<-lm(Temp~Ozone+Solar.R+Wind,data=dat)
summary(lm_model)
par(mfrow=c(2,2))
plot(lm_model)
lm_model2<-step(lm_model)
lm_pred<-predict(lm_model,interval="prediction")
mdf<-cbind(dat[,1:4],lm_pred)
ggplot() +
geom_line(data=mdf[,c("Ozone","Temp")], aes(x=Ozone, y=Temp), color='steelblue') +
geom_line(data=mdf[,c("Ozone","fit")], aes(x=Ozone, y=fit), color='coral2')+
geom_line(data=mdf[,c("Ozone","lwr")], aes(x=Ozone, y=lwr), color='green') +
geom_line(data=mdf[,c("Ozone","upr")], aes(x=Ozone, y=upr), color='green')
# 线性回归
ggplot(mdf[,c("Ozone","Temp")], aes(Ozone, Temp)) +
geom_point() +
geom_smooth(method = lm)
# 三次样条回归
ggplot(mdf[,c("Ozone","Temp")], aes(Ozone, Temp)) +
geom_point() +
geom_smooth(method = lm, formula = y ~ splines::bs(x, 3), se = FALSE)
#===============================================
# 混淆矩阵
library(caret)
dat<-iris
dat<-dat[51:150,]
dat$Species<-ifelse(dat$Species=="virginica",1,0)
log_model<-glm(Species~.,family=binomial(link='logit'),data=dat)
log_model2<-step(log_model)
# 混淆矩阵
pred<-predict(log_model2)
prob<-exp(pred)/(1+exp(pred))
yhat<-1*(prob>0.5)
table(dat$Species,yhat)
cf<-confusionMatrix(as.factor(dat$Species),as.factor(yhat));cf
?confusionMatrix
fourfoldplot(as.table(cf),color=c("green","red"))
#===============================================
# 混淆矩阵
par(mfrow=c(1,1))
library(caret)
dat<-iris
dat<-dat[51:150,]
dat$Species<-ifelse(dat$Species=="virginica",1,0)
log_model<-glm(Species~.,family=binomial(link='logit'),data=dat)
log_model2<-step(log_model)
# 混淆矩阵
pred<-predict(log_model2)
prob<-exp(pred)/(1+exp(pred))
yhat<-1*(prob>0.5)
table(dat$Species,yhat)
cf<-confusionMatrix(as.factor(dat$Species),as.factor(yhat));cf
?confusionMatrix
fourfoldplot(as.table(cf),color=c("green","red"))
fourfoldplot(as.table(cf),color=c("red"，"green"))
fourfoldplot(as.table(cf),color=c("red","green"))
library(pROC)
data(aSAH)
rocobj <- roc(aSAH$outcome, aSAH$s100b)
plot(rocobj,
legacy.axes = TRUE,
main="ROC曲线最佳阈值点",
thresholds="best", # 基于youden指数选择roc曲线最佳阈值点
print.thres="best") # 在roc曲线上显示最佳阈值点
ggroc(rocobj,
alpha = 0.5, colour = "red",
linetype = 2, size = 2) +
theme_minimal() +
ggtitle("My ROC curve") +
geom_segment(aes(x = 1, xend = 0, y = 0, yend = 1),
color="grey", linetype="dashed")
library(ROCR)
pred <- prediction(dat$Species,yhat)
roc.perf = performance(pred, measure = "tpr", x.measure = "fpr")
plot(roc.perf)
abline(a=0, b= 1)
data(ROCR.hiv)
manypred = prediction(ROCR.hiv$hiv.nn$predictions, ROCR.hiv$hiv.nn$labels)
many.roc.perf = performance(manypred, measure = "tpr", x.measure = "fpr")
plot(many.roc.perf, col=1:10)
abline(a=0, b= 1)
library(ROCR)
pred <- prediction(dat$Species,yhat)
roc.perf = performance(pred, measure = "tpr", x.measure = "fpr")
plot(roc.perf)
abline(a=0, b= 1)
data(ROCR.hiv)
manypred = prediction(ROCR.hiv$hiv.nn$predictions, ROCR.hiv$hiv.nn$labels)
many.roc.perf = performance(manypred, measure = "tpr", x.measure = "fpr")
plot(many.roc.perf, col=1:10)
abline(a=0, b= 1)
rocobj <- roc(aSAH$outcome, aSAH$s100b)
plot(rocobj,
legacy.axes = TRUE,
main="ROC曲线最佳阈值点",
thresholds="best", # 基于youden指数选择roc曲线最佳阈值点
print.thres="best") # 在roc曲线上显示最佳阈值点
ggroc(rocobj,
alpha = 0.5, colour = "red",
linetype = 2, size = 2) +
theme_minimal() +
ggtitle("My ROC curve") +
geom_segment(aes(x = 1, xend = 0, y = 0, yend = 1),
color="grey", linetype="dashed")
aSAH
head(aSAH)
rocobj
aSAH
head(aSAH)
library(ROCR)
pred <- prediction(dat$Species,yhat)
library(ROCR)
pred <- prediction(dat$Species,yhat)
dat
head(dat)
yhat
pred <- prediction(dat$Species,yhat)
dat$Species
yhat
as.numeric(yhat)
pred <- prediction(dat$Species,as.numeric(yhat))
dat$Species
library(ROCR)
pred <- prediction(dat$Species,yhat)
pred
pred<-predict(log_model2)
pred<-predict(log_model2)
roc.perf = performance(pred, measure = "tpr", x.measure = "fpr")
plot(roc.perf)
abline(a=0, b= 1)
pred<-predict(log_model2)
roc.perf = performance(pred, measure = "tpr", x.measure = "fpr")
pred<-predict(log_model2)
pred
roc.perf = performance(pred, measure = "tpr", x.measure = "fpr")
roc.perf = performance(as.numeric(pred), measure = "tpr", x.measure = "fpr")
?performance
roc.perf = performance(pred, measure = "tpr", x.measure = "fpr")
plot(roc.perf)
abline(a=0, b= 1)
pred<-predict(log_model2)
roc.perf = performance(pred, measure = "tpr", x.measure = "fpr")
roc.perf
library(ROCR)
data(aSAH)
rocobj <- roc(aSAH$outcome, aSAH$s100b)
plot(rocobj,
legacy.axes = TRUE,
main="ROC曲线最佳阈值点",
thresholds="best", # 基于youden指数选择roc曲线最佳阈值点
print.thres="best") # 在roc曲线上显示最佳阈值点
ggroc(rocobj,
alpha = 0.5, colour = "red",
linetype = 2, size = 2) +
theme_minimal() +
ggtitle("My ROC curve") +
geom_segment(aes(x = 1, xend = 0, y = 0, yend = 1),
color="grey", linetype="dashed")
library(ROCR)
detach("package:pROC", unload = TRUE)
library(ROCR)
pred<-predict(log_model2)
roc.perf = performance(pred, measure = "tpr", x.measure = "fpr")
?performance
pred<-prediction(dat$Species,yhat)
dat$Species
str(dat$Species)
yhat
pred<-prediction(dat$Species,yhat)
data(ROCR.simple)
pred <- prediction( ROCR.simple$predictions, ROCR.simple$labels)
ROCR.simple$predictions
ROCR.simple$labels
pred<-prediction(yhats,dat$Species)
pred<-prediction(yhat,dat$Species)
data(ROCR.simple)
pred <- prediction( ROCR.simple$predictions, ROCR.simple$labels)
library(ROCR)
pred<-prediction(yhat,dat$Species)
roc.perf = performance(pred, measure = "tpr", x.measure = "fpr")
rm(list = ls())
library(ROCR)
pred<-prediction(yhat,dat$Species)
#===============================================
# 混淆矩阵
par(mfrow=c(1,1))
library(caret)
dat<-iris
dat<-dat[51:150,]
dat$Species<-ifelse(dat$Species=="virginica",1,0)
log_model<-glm(Species~.,family=binomial(link='logit'),data=dat)
log_model2<-step(log_model)
# 混淆矩阵
pred<-predict(log_model2)
prob<-exp(pred)/(1+exp(pred))
yhat<-1*(prob>0.5)
table(dat$Species,yhat)
cf<-confusionMatrix(as.factor(dat$Species),as.factor(yhat));cf
fourfoldplot(as.table(cf),color=c("green","red"))
library(ROCR)
pred<-prediction(yhat,dat$Species)
yhat
30520
28224
2520
1752
1500
30520+28224+2520+1752+1500
row1<-"4|3|用途:用于喷码机工业喷码印刷|包装:密闭桶包装|颜色: 红色|成分含量: 甲基乙基酮90-<100%"
row2<-"4|3|空客飞机用1丙酮: 70-100%\\\2-丁酮: 40-<70%"
row3<-"4|3]用途:涂于振动子表面,增强接着强度|成分含量:甲苯45%"
row4<-"0|3|工业用|2-丁酮54%"
row5<-"4|3|用途:制钉胶水|包装: 罐装|成分含量:丙酮 75%"
library(stringr)
keys<-甲苯|丙酮|丁酮|硫酸|甲基苯|二甲基酮|二甲基甲酮|二甲酮|甲基基酮|甲乙酮
keys<-"甲苯|丙酮|丁酮|硫酸|甲基苯|二甲基酮|二甲基甲酮|二甲酮|甲基基酮|甲乙酮"
keys
str_detect(row1,keys)
keys<-"甲苯|丙酮|丁酮|硫酸|甲基苯|二甲基酮|二甲基甲酮|二甲酮|甲基乙基酮|甲乙酮"
str_detect(row1,keys)
str_detect(row1,keys)
str_detect(row1,keys)
str_locate(row1,keys)
str_locate(row1,"|")
str_locate_all(row1,"|")
str_locate_all(row1,"\|")
# 机器学习
setwd("C:\\workspace\\政府项目\\海关总署\\培训交流\\风险司-20230605")
# 鸢尾花
head(iris)
iris
pairs(iris[,1:4], col = iris$Species)
hist(iris$Sepal.Length)
hist(iris$Sepal.Length,20)
head(iris)
############################
# 逻辑回归
dat<-iris
dat<-dat[51:150,]
dat$Species<-ifelse(dat$Species=="virginica",1,0)
log_model<-glm(Species~.,family=binomial(link='logit'),data=dat)
summary(log_model)
# 逐步回归
log_model2<-step(log_model)
summary(log_model2)
# 混淆矩阵
pred<-predict(log_model2)
prob<-exp(pred)/(1+exp(pred))
yhat<-1*(prob>0.5)
table(dat$Species,yhat)
# 决策树
library(rpart)
library(rpart.plot)
library(visNetwork)
library(sparkline)
library(ggpol)
dtree_model <- rpart(Species~., data = iris, control = rpart.control(cp = 0.019))
visTree(dtree_model)
rpart.plot(dtree_model)
# 预测
dtree_pred <- predict(dtree_model,iris,type = "class")
## 混淆矩阵
ggplot() + geom_confmat(aes(x = iris$Species, y = dtree_pred),
normalize = TRUE, text.perc = TRUE)+
labs(x = "Reference",y = "Prediction")+
scale_fill_gradient2(low="darkblue", high="lightgreen")
library(partykit)
ct <- ctree(Species ~ ., data = iris, maxdepth = 4, alpha = 0.5)
plot(ct)
library("xgboost")
library("Matrix")
y <- as.numeric(iris$Species) - 1
x <- as.matrix(iris[,-5])
xgb_model<-xgboost(data=x,label=y,max_depth=4,eta=0.5,
nthread=2,nrounds=10,subsample=0.7,objective="multi:softprob",
num_class=3)
# 变量重要性
xgb_imp<-xgb.importance(model=xgb_model)
xgb.plot.importance(xgb_imp,rel_to_first = TRUE)
# 预测
xgb_pred<-matrix(predict(xgb_model,x),ncol=3,byrow = TRUE)
xgb_pred<-data.frame(xgb_pred)
xgb_pred$result<-apply(xgb_pred,1,which.max)
xgb_pred$label<-levels(iris$Species)[xgb_pred$result]
# 评估
ggplot() + geom_confmat(aes(x = iris$Species, y = xgb_pred$label),
normalize = TRUE, text.perc = TRUE)+
labs(x = "Reference",y = "Prediction")+
scale_fill_gradient2(low="darkblue", high="lightgreen")
# 变量重要性
xgb_imp<-xgb.importance(model=xgb_model)
xgb.plot.importance(xgb_imp,rel_to_first = TRUE)
ggplot() + geom_confmat(aes(x = iris$Species, y = xgb_pred$label),
normalize = TRUE, text.perc = TRUE)+
labs(x = "Reference",y = "Prediction")+
scale_fill_gradient2(low="darkblue", high="lightgreen")
iris
iris
iris$Species
as.numeric(iris$Species)
y <- as.numeric(iris$Species) - 1
y
x <- as.matrix(iris[,-5])
head(x)
xgb_model<-xgboost(data=x,label=y,max_depth=4,eta=0.5,
nthread=2,nrounds=10,subsample=0.7,objective="multi:softprob",
num_class=3)
library(GGally)
res <- kmeans(iris[,1:4], centers=3)
ggpairs(iris,columns = 1:5,
mapping=aes(colour=as.character(res$cluster)))
shiny::runApp('C:/work/python/address/addr_demo/demo')
runApp('C:/work/python/address/addr_demo/demo')
runApp('C:/work/python/address/addr_demo/demo')
runApp('C:/work/python/address/addr_demo/demo')
runApp('C:/work/python/address/addr_demo/demo')
runApp('C:/work/python/address/addr_demo/demo')
runApp('C:/work/python/address/addr_demo/demo')
runApp('C:/work/python/address/addr_demo/demo')
library(stringr)
print("111")
print("不行")
a<-"可以"
Encoding(a)<-"GB2312"
print(a)
#print(stri_escape_unicode(a))
print(iconv("\u8bd5\u7528\u4e00\u4e0b",from="UTF-8",to="GBK"))
b<-"\u8bd5\u7528\u4e00\u4e0b"
b2<-"\\u8bd5\\u7528"
print("\\u8bd5\\u7528")
stri_unescape_unicode(b2)
library(stringi)
print("111")
print("不行")
a<-"可以"
Encoding(a)<-"GB2312"
print(a)
#print(stri_escape_unicode(a))
print(iconv("\u8bd5\u7528\u4e00\u4e0b",from="UTF-8",to="GBK"))
b<-"\u8bd5\u7528\u4e00\u4e0b"
b2<-"\\u8bd5\\u7528"
print("\\u8bd5\\u7528")
stri_unescape_unicode(b2)
library(stringi)
print("111")
print("不行")
a<-"可以"
Encoding(a)<-"GB2312"
print(a)
#print(stri_escape_unicode(a))
print(iconv("\u8bd5\u7528\u4e00\u4e0b",from="UTF-8",to="GBK"))
b<-"\u8bd5\u7528\u4e00\u4e0b"
b2<-"\\u8bd5\\u7528"
print("\\u8bd5\\u7528")
stri_escape_unicode(stri_unescape_unicode(b2))
library(stringi)
a<-"可以"
print(a)
b<-"\\u8bd5\\u7528"
print(b)
stri_escape_unicode(a)
stri_escape_unicode(stri_unescape_unicode(b2))
library(stringi)
a<-"可以"
print(a)
b<-"\\u8bd5\\u7528"
print(b)
stri_escape_unicode(a)
stri_escape_unicode(stri_unescape_unicode(b2))
#"C:\Program Files\R\R-3.6.3\bin\R.exe " --encoding=UTF-8 -f zhongwen.r
#"C:\Program Files\R\R-3.6.3\bin\R.exe " --encoding=GBK -f zhongwen.r
shiny::runApp('C:/work/qmsh/药审和宁波1-231008/药审/medicinal_program')
install.packages("shinyWidgets")
runApp('C:/work/qmsh/药审和宁波1-231008/药审/medicinal_program')
install.packages("getip")
runApp('C:/work/qmsh/药审和宁波1-231008/药审/medicinal_program')
install.packages("shinydashboard")
runApp('C:/work/qmsh/药审和宁波1-231008/药审/medicinal_program')
install.packages("descriptr")
runApp('C:/work/qmsh/药审和宁波1-231008/药审/medicinal_program')
install.packages("vistributions")
runApp('C:/work/qmsh/药审和宁波1-231008/药审/medicinal_program')
runApp('C:/work/qmsh/药审和宁波1-231008/药审/medicinal_program')
runApp('C:/work/qmsh/药审和宁波1-231008/药审/medicinal_program')
shiny::runApp('C:/work/qmsh/药审和宁波1-231008/药审/medicinal_program')
setwd("D:/workspace/政府项目/外汇/十堰/孙殳涉嫌非法经营案")
setwd("C:/work/R/text/r-string-match")
